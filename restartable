#!/usr/bin/env python3
#
# Copyright 2019 Ricardo Branco <rbranco@suse.de>
# MIT License
#
"""
list restartable programs or services using deleted libraries
"""

import os
import re
import sys
from argparse import ArgumentParser

from _restartable.procfs import Proc, ProcPid
from _restartable import __version__


USAGE = """%s [OPTIONS]

List running processes using files deleted by recent upgrades

Options:
    -h, --help      Get help
    -V, --version   Show version and exit
    -P, --proc PROC_DIRECTORY
    -s, --short
         Create a short table not showing the deleted files. Given twice,
         show only processes which are associated with a system service.
         Given three times, list the associated system service names only.
    -v, --verbose   Show the complete command line
""" % os.path.basename(sys.argv[0])

# Ignore deleted files in these directories
IGNORE = (
    '/dev',
    '/run',
    '/ ',
)

# Regular expression to find systemd service unit in /proc/<pid>/cgroup
SYSTEMD_REGEX = r"\d+:(?:name=systemd)?:/system\.slice/(?:.*/)?(.*)\.service$"

# Regular expression to match scripting languages
SCRIPT_REGEX = r"((perl|python|(ruby\.)?ruby)(\d?(\.\d)?)|(a|ba|c|da|fi|k|pdk|tc|z)?sh)$"

FORMAT_STRING = "%s\t%s\t%s\t%-20s\t%20s\t%s"

DELETED = " (deleted)"

opts = None
services = set()


def guess_command(proc):
    """
    Guess the command being run
    """
    if opts.verbose:
        # cmdline is empty if zombie, but zombies have void proc.maps
        if not proc.cmdline[0].startswith('/') and proc.exe:
            # Use full path
            exe = proc.exe
            if exe.endswith(DELETED):
                exe = exe[:-len(DELETED)]  # Strip " (deleted)"
            if os.path.basename(proc.cmdline[0]) == os.path.basename(exe):
                return " ".join([exe] + proc.cmdline[1:])
        return " ".join(proc.cmdline)
    cmdline = proc.status.Name
    # The command may be truncated to 15 chars
    #   in /proc/<pid>/{comm,stat,status}
    # Also, kernel usermode helpers use "none"
    if (len(cmdline) == 15 or cmdline == "none") and proc.cmdline[0]:
        cmdline = proc.cmdline[0]
    # If running a script, get the name of the script instead of the interpreter
    if re.match(SCRIPT_REGEX, os.path.basename(cmdline.split()[0])):
        # Skip options
        for arg in proc.cmdline[1:]:
            if (arg.startswith('/') and os.path.isfile(arg)
                    or os.path.isfile(os.path.join(proc.cwd, arg))):
                cmdline = arg
                break
    if cmdline.startswith('/'):
        return os.path.basename(cmdline)
    return cmdline.split()[0]


def print_info(proc, deleted):
    """
    Print information
    """
    try:
        service = re.findall(SYSTEMD_REGEX, proc.cgroup, re.MULTILINE)[0]
    except IndexError:
        if opts.short > 1:
            return
        service = "-"
    if opts.short > 2:
        services.add(service)
    else:
        uid = proc.status.Uid.real
        username = uid.name
        cmdline = guess_command(proc)
        print(FORMAT_STRING % (
            proc.pid, proc.status.PPid, uid, username, service, cmdline))
    if not opts.short:
        for path in sorted(deleted):
            print("\t%s" % path)


def main():
    """
    Main function
    """
    if opts.help:
        print(USAGE)
        sys.exit(0)
    elif opts.version:
        print(__version__)
        sys.exit(0)

    if os.geteuid() != 0:
        print("WARN: Run this program as root", file=sys.stderr)

    if not os.path.isdir(opts.proc):
        print("ERROR: %s: No such directory" % opts.proc, file=sys.stderr)
        sys.exit(1)

    if opts.short < 3:
        print(FORMAT_STRING % (
            "PID", "PPID", "UID", "User", "Service", "Command"))
    for pid in Proc().pids():
        try:
            with ProcPid(pid, proc=opts.proc) as proc:
                # Get deleted executable mappings
                deleted = {
                    _['pathname'][:-len(DELETED)]
                    for _ in list(proc.maps)
                    if (_['pathname']
                        and 'x' in _['perms']
                        and _['pathname'].endswith(DELETED)
                        and not _['pathname'].startswith(IGNORE))
                }
                if deleted:
                    print_info(proc, deleted)
        except OSError:
            pass
    if opts.short > 2:
        print("\n".join(sorted(services)))


if __name__ == "__main__":
    argparser = ArgumentParser(usage=USAGE, add_help=False)
    argparser.add_argument('-h', '--help', action='store_true')
    argparser.add_argument('-P', '--proc', default='/proc')
    argparser.add_argument('-s', '--short', action='count', default=0)
    argparser.add_argument('-v', '--verbose', action='store_true')
    argparser.add_argument('-V', '--version', action='store_true')
    opts = argparser.parse_args()
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
